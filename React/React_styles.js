// https://styled-components.com/docs/basics

import React from 'react';

const styles = {
    ul: {
        listStyle: 'none',
        margin: 0,
        padding: 0
    },
    li: {
        display: 'flex',
        border: '1px solid red'
    }
}

export const Asdd = (props) =>{
    return (
        <ul style={styles.ul}>
            <li>1</li>
            <li>2</li>
            <li style={{justifyContent: 'center', margin: '.5rem'}}>3</li>
        </ul>
    )
}


// 2.                  styled-components
// npm install styled-components
import React, { Component } from 'react';
import styled from 'styled-components';
 
// const Input = styled.div`
const Input2 = styled.input`
  padding: 0.5em;
  margin: 0.5em;
  color: palevioletred;
  background: papayawhip;
  border: none;
  border-radius: ${props => props.hasRadius ? '3px' : '0px'};
`;
 
const Button = styled.button`
  cursor: pointer;
  background: transparent;
  font-size: 16px;
  border-radius: 3px;
  color: ${props => (props.primary ? 'violet' : 'palevioletred')};
  border: ${props =>
    props.primary ? '2px solid violet' : '2px solid palevioletred'};
  margin: 0 1em;
  padding: 0.25em 1em;
  transition: 0.5s all ease-out;
  display: flex !important;
  flex-basis: calc(33.333% - 20px);
  padding: ${props => props.size};

  &:active,
  &:focus {
    text-align: left;
  }
 
  &:hover {
    color: white;
    background-color: ${props =>
      props.primary ? 'violet' : 'palevioletred'};
  }
`;

class App extends Component {
  ...
 
  render() {
    return (
      <div>
        <Input2
          value={this.state.value}
          onChange={this.onChange}
          hasRadius={true}
        />
        <Button>I am a Button</Button>
        <Button primary>I am a Primary Button</Button>
      </div>
    );
  }
}


//https://styled-components.com/docs/basics#adapting-based-on-props
// –Ω–∞–¥–∞–π—Ç–µ —è–∫–æ—Ä—é —Ç–µ–∂ –¥–µ—è–∫–∏–π —Å—Ç–∏–ª—å, —Ç–æ–¥—ñ —è–∫ –≤–∏–±—Ä–∞–Ω–∏–π 
const Anchor = styled.a`
  display: block;
  margin-bottom: 10px;
  text-decoration: none;
  background-color: papayawhip;
 
  ${props =>
    props.selected
      ? css`
          border-bottom: 1px solid #000;
          font-weight: bold;
        `
      : null};
`;
 
class App extends Component {
  constructor(props) {
    ...
  }
 
  render() {
    return (
      <Anchor
        href={`#${thing.id}`}
        selected={thing.id === 'a'}
      >
        {thing.headline}
      </Anchor>


/////////////////////

const Button = styled.button`
  color: palevioletred;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

// —É—Å–ø–∞–¥–µ–æ–≤—É—î —Å—Ç–∏–ª—ñ Button —ñ –¥–æ–±–∞–≤–ª—è—î —Å–≤–æ—ó—Ö 2 —Å—Ç–∏–ª—ñ
const TomatoButton = styled(Button)`
  color: blue;
  border-color: tomato;
`;

render(
  <div>
    <Button>Normal Button</Button>
    <TomatoButton>Tomato Bton</TomatoButton>
  </div>




// as - –¥–ª—è –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—é —Å—Ç–∏–ª—é –∑ –µ–ª–µ–º–µ–Ω—Ç—É "–∞"
<Button as="a" href="/">Link with Button styles</Button>






//                                         animations
// https://styled-components.com/docs/basics#animations
// Create the keyframes
const rotate = keyframes`
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
`;

// Here we create a component that will rotate everything we pass in over two seconds
const Rotate = styled.div`
  display: inline-block;
  animation: ${rotate} 2s linear infinite;
  padding: 2rem 1rem;
  font-size: 1.2rem;
  animation-fill-mode: none | forwards | backwards | both; //–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó
`;

render(
  <Rotate>&lt; üíÖüèæ &gt;</Rotate>
);




// 00                                   –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
// –Ø–∫—â–æ —É –≤–∞—Å —î –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ñ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ–±–Ω–∏–π, —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–µ—â–æ —ñ–Ω–∞–∫—à–µ
const Button = styled.button`
  color: black;
  //...
`
const WhiteButton = Button.extend`
  color: white;
`
render(
  <div>
    <Button>A black button, like all buttons</Button>
    <WhiteButton>A white button</WhiteButton>
  </div>
)




//                                        –ø—Ä–∏–∫–ª–∞–¥ –º–µ–¥—ñ–∞-–∑–∞–ø–∏—Ç—É:
const Button = styled.button`
  color: green;
  @media screen and (max-width: 800px) {
    color: black;
  }
`