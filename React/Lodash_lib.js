// https://lodash.com



// 1.                                   orderBy
// Цей метод схожий на _.sortBy за винятком того, що дозволяє вказати порядок сортування ітераторів, 
// за якими потрібно сортувати. Якщо не orders вказано, усі значення сортуються за зростанням. 
// В іншому випадку вкажіть порядок "desc" для спадання або "asc" для зростання порядку сортування відповідних значень.
var users = [
  { 'user': 'fred',   'age': 48 },
  { 'user': 'barney', 'age': 34 },
  { 'user': 'fred',   'age': 40 },
  { 'user': 'barney', 'age': 36 }
];
 
// Сортування за `user` у порядку зростання та за `age` за спаданням.
_.orderBy(users, ['user', 'age'], ['asc', 'desc']);
// => об'єкти для [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]



// 2.                               _.uniq(array)
// Створює без дублікатів версію масиву, використовуючи SameValueZeroдля порівняння рівності, 
// в якій зберігається лише перша поява кожного елемента. Порядок значень результатів визначається порядком їх 
// виникнення в масиві.
_.uniq([2, 1, 2]);
// => [2, 1]


// 3.                    _.uniqBy(array, [iteratee=_.identity])
// Цей метод подібний _.uniq за винятком того, що він приймає те, iteratee що викликається для кожного елемента в, 
// array щоб генерувати критерій, за яким обчислюється унікальність. Порядок значень результатів визначається порядком 
// їх виникнення в масиві. Ітератор викликається одним аргументом: (значення) .
_.uniqBy([2.1, 1.2, 2.3], Math.floor);
// => [2.1, 1.2]
// Ітераційний текст "_.property".
_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
// => [{ 'x': 1 }, { 'x': 2 }]

// kim
uniqBy(cart.items, el => el.id)