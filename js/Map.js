// https://flaviocopes.com/javascript-data-structures-map/


// ES6 представив структуру даних Map, надавши нам належний інструмент для обробки такого роду організації даних.
// Карта ініціалізується за допомогою виклику:
const m = new Map()

// Ви можете додати об'єкти на карту, використовуючи setметод:
m.set('color', 'red')
m.set('age', 2)

// І ви можете дістати елементи з карти, використовуючи get:
const color = m.get('color')
const age = m.get('age')

// Видалення об’єкта з карти за допомогою ключа
m.delete('color')

// Видаліть усі елементи з карти
m.clear()

// Перевірте, чи карта містить елемент за ключем
const hasColor = m.has('color')

// Знайдіть кількість об’єктів на карті
const size = m.size

// Ви можете ініціалізувати карту з набором значень:
const m = new Map([['color', 'red'], ['owner', 'Flavio'], ['age', 2]])

// Ключі карти
// Подібно до того, як будь-яке значення (об'єкт, масив, рядок, число) може використовуватися як значення введення 
// ключа-значення елемента карти, будь-яке значення може використовуватися як ключ , навіть об'єкти.
// Якщо ви спробуєте дістати неіснуючий ключ за get()допомогою карти, він повернеться undefined.

// Дивні ситуації, яких ви майже ніколи не зустрінете в реальному житті
const m = new Map()
m.set(NaN, 'test')
m.get(NaN) //test
const m = new Map()
m.set(+0, 'test')
m.get(-0) //test

// Переглядайте ключі карти
for (const k of m.keys()) {
  console.log(k)
}

// Перебирайте значення карт
for (const v of m.values()) {
  console.log(v)
}

// Ітерація над ключем карти, парами значень
for (const [k, v] of m.entries()) {
  console.log(k, v)
}
// який можна спростити
for (const [k, v] of m) {
  console.log(k, v)
}

// Перетворіть ключі карти в масив
const a = [...m.keys()]
// Перетворення значень карти в масив
const a = [...m.values()]